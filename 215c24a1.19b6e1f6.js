(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{145:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return b})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return p}));var a=n(2),r=n(9),o=(n(0),n(162)),l={id:"python",title:"PyCylon"},b={id:"python",isDocsHomePage:!1,title:"PyCylon",description:"PyCylon is the Python binding for LibCylon (C++ Cylon). The uniqueness of PyCylon",source:"@site/docs/python.md",permalink:"/docs/python",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/python.md",sidebar:"someSidebar",previous:{title:"C++",permalink:"/docs/cpp"},next:{title:"JCylon",permalink:"/docs/java"}},c=[{value:"Table API",id:"table-api",children:[{value:"Initialize",id:"initialize",children:[]},{value:"Load a Table",id:"load-a-table",children:[]},{value:"Join",id:"join",children:[]},{value:"Union",id:"union",children:[]},{value:"Intersect",id:"intersect",children:[]},{value:"Subtract",id:"subtract",children:[]},{value:"Select",id:"select",children:[]}]},{value:"Python Examples",id:"python-examples",children:[]}],i={rightToc:c};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},i,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"PyCylon is the Python binding for LibCylon (C++ Cylon). The uniqueness of PyCylon\nis that it can be used as a library or a framework. As a library, PyCylon seamlessly\nintegrates with PyArrow. This brings us the capability of providing the user the\ncompatibility with Pandas, Numpy and Tensors. As a framework we support distributed\nrelational algebra operations using MPI as the distributed backend. "),Object(o.b)("h2",{id:"table-api"},"Table API"),Object(o.b)("p",null,"PyCylon Table API currently offers a set of relational algebra operators to\npreprocess the data. "),Object(o.b)("h3",{id:"initialize"},"Initialize"),Object(o.b)("p",null,"In a Cylon programme, if you use Cylon with ",Object(o.b)("inlineCode",{parentName:"p"},"MPI")," backend, the initialization\nmust be done as follows;"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'ctx: CylonContext = CylonContext("mpi")\n')),Object(o.b)("p",null,"Without MPI, "),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"ctx: CylonContext = CylonContext()\n")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-txt"}),"Note: In the current release, Cylon only supports MPI as a distributed backend \n")),Object(o.b)("h3",{id:"load-a-table"},"Load a Table"),Object(o.b)("p",null,"Using Cylon "),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"from pycylon Table\nfrom pycylon.io import read_csv\n\ntb1: Table = read_csv(ctx, '/tmp/csv.csv', ',')\n")),Object(o.b)("p",null,"Using PyArrow and convert to PyCylon Table"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"from pyarrow import csv\nfrom pycylon.data.table import Table\nfrom pyarrow import Table as PyArrowTable\n\npyarrow_tb: PyArrowTable = csv.read_csv('/tmp/csv.csv')\ncylon_tb = Table.from_arrow(pyarrow_tb)\n")),Object(o.b)("p",null,"Also a Cylon Table can be converted to a PyArrow Table"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"pyarrow_tb: PyArrowTable = cylon_tb.to_arrow()\n")),Object(o.b)("h3",{id:"join"},"Join"),Object(o.b)("p",null,"Join API supports ",Object(o.b)("inlineCode",{parentName:"p"},"left, right, inner, outer' joins")," with\n",Object(o.b)("inlineCode",{parentName:"p"},"Hash")," or ",Object(o.b)("inlineCode",{parentName:"p"},"Sort")," algorithms. User can specify these configs\nas using Python ",Object(o.b)("inlineCode",{parentName:"p"},"str"),". "),Object(o.b)("p",null,"Sequential Join"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"csv_read_options = CSVReadOptions().use_threads(True).block_size(1 << 30)\n\ntb1: Table = read_csv(ctx, table1_path, csv_read_options)\n\ntb2: Table = read_csv(ctx, table2_path, csv_read_options)\n\ntb3: Table = tb1.join(table=tb2, join_type='inner', algorithm='hash', left_on=[0],\n                      right_on=[0])\n")),Object(o.b)("p",null,"Distributed Join"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"csv_read_options = CSVReadOptions().use_threads(True).block_size(1 << 30)\n\ntb1: Table = read_csv(ctx, table1_path, csv_read_options)\n\ntb2: Table = read_csv(ctx, table2_path, csv_read_options)\n\ntb3: Table = tb1.distributed_join(table=tb2, join_type='inner', algorithm='hash', left_on=[0],\n                                  right_on=[0])\n")),Object(o.b)("h3",{id:"union"},"Union"),Object(o.b)("p",null,"Sequential Union"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"tb4: Table = tb1.union(tb2)\n")),Object(o.b)("p",null,"Distributed Union"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"tb5: Table = tb1.distributed_union(table=tb2)\n")),Object(o.b)("h3",{id:"intersect"},"Intersect"),Object(o.b)("p",null,"Sequential Intersect"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"tb4: Table = tb1.intersect(table=tb2)\n")),Object(o.b)("p",null,"Distributed Intersect"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"tb5: Table = tb1.distributed_intersect(table=tb2)\n")),Object(o.b)("h3",{id:"subtract"},"Subtract"),Object(o.b)("p",null,"Sequential Subtract"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"tb4: Table = tb1.subtract(table=tb2)\n")),Object(o.b)("p",null,"Distributed Subtract"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"tb5: Table = tb1.distributed_subtract(table=tb2)\n")),Object(o.b)("h3",{id:"select"},"Select"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-Note"}),"This is not yet supported from PyCylon API, but LibCylon supports this.\n")),Object(o.b)("h2",{id:"python-examples"},"Python Examples"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"[Relational Algebra Examples]","(",Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/cylondata/cylon/blob/master/python/examples"}),"https://github.com/cylondata/cylon/blob/master/python/examples"),"\n/table_relational_algebra.py)"),Object(o.b)("li",{parentName:"ol"},"[Compute Examples]","(",Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/cylondata/cylon/blob/master/python/examples"}),"https://github.com/cylondata/cylon/blob/master/python/examples"),"\n/table_compute_examples.py)")))}p.isMDXComponent=!0},162:function(e,t,n){"use strict";n.d(t,"a",(function(){return s})),n.d(t,"b",(function(){return y}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function b(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=r.a.createContext({}),p=function(e){var t=r.a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):b(b({},t),e)),n},s=function(e){var t=p(e.components);return r.a.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,i=c(e,["components","mdxType","originalType","parentName"]),s=p(n),d=a,y=s["".concat(l,".").concat(d)]||s[d]||u[d]||o;return n?r.a.createElement(y,b(b({ref:t},i),{},{components:n})):r.a.createElement(y,b({ref:t},i))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=d;var b={};for(var c in t)hasOwnProperty.call(t,c)&&(b[c]=t[c]);b.originalType=e,b.mdxType="string"==typeof e?e:a,l[1]=b;for(var i=2;i<o;i++)l[i]=n[i];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);