(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{71:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return o})),a.d(t,"metadata",(function(){return b})),a.d(t,"rightToc",(function(){return c})),a.d(t,"default",(function(){return p}));var n=a(3),r=a(7),l=(a(0),a(91)),o={id:"python",title:"PyCylon"},b={unversionedId:"python",id:"python",isDocsHomePage:!1,title:"PyCylon",description:"PyCylon is the Python binding for LibCylon (C++ Cylon). The uniqueness of PyCylon",source:"@site/docs/python.md",slug:"/python",permalink:"/docs/python",editUrl:"https://github.com/cylondata/cylon/edit/master/docs/docs/python.md",version:"current",sidebar:"someSidebar",previous:{title:"C++",permalink:"/docs/cpp"},next:{title:"JCylon",permalink:"/docs/java"}},c=[{value:"Table",id:"table",children:[{value:"Initialize",id:"initialize",children:[]},{value:"Load a Table",id:"load-a-table",children:[]},{value:"Join",id:"join",children:[]},{value:"Union",id:"union",children:[]},{value:"Intersect",id:"intersect",children:[]},{value:"Subtract",id:"subtract",children:[]},{value:"Select",id:"select",children:[]}]},{value:"Python Examples",id:"python-examples",children:[]}],i={rightToc:c};function p(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(l.b)("wrapper",Object(n.a)({},i,a,{components:t,mdxType:"MDXLayout"}),Object(l.b)("p",null,"PyCylon is the Python binding for LibCylon (C++ Cylon). The uniqueness of PyCylon\nis that it can be used as a library or a framework. As a library, PyCylon seamlessly\nintegrates with PyArrow. This brings us the capability of providing the user the\ncompatibility with Pandas, Numpy and Tensors. As a framework we support distributed\nrelational algebra operations using MPI as the distributed backend. "),Object(l.b)("h2",{id:"table"},"Table"),Object(l.b)("p",null,"PyCylon Table API currently offers a set of relational algebra operators to\npreprocess the data. "),Object(l.b)("h3",{id:"initialize"},"Initialize"),Object(l.b)("p",null,"In a Cylon programme, if you use Cylon with ",Object(l.b)("inlineCode",{parentName:"p"},"MPI")," backend, the initialization\nmust be done as follows;"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'ctx: CylonContext = CylonContext("mpi")\n')),Object(l.b)("p",null,"Without MPI, "),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"ctx: CylonContext = CylonContext()\n")),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-txt"}),"Note: In the current release, Cylon only supports MPI as a distributed backend \n")),Object(l.b)("h3",{id:"load-a-table"},"Load a Table"),Object(l.b)("p",null,"Using Cylon "),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"from pycylon Table\nfrom pycylon.io import read_csv\n\ntb1: Table = read_csv(ctx, '/tmp/csv.csv', ',')\n")),Object(l.b)("p",null,"Using PyArrow and convert to PyCylon Table"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"from pyarrow import csv\nfrom pycylon.data.table import Table\nfrom pyarrow import Table as PyArrowTable\n\npyarrow_tb: PyArrowTable = csv.read_csv('/tmp/csv.csv')\ncylon_tb = Table.from_arrow(pyarrow_tb)\n")),Object(l.b)("p",null,"Also a Cylon Table can be converted to a PyArrow Table"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"pyarrow_tb: PyArrowTable = cylon_tb.to_arrow()\n")),Object(l.b)("h3",{id:"join"},"Join"),Object(l.b)("p",null,"Join API supports ",Object(l.b)("inlineCode",{parentName:"p"},"left, right, inner, outer' joins")," with\n",Object(l.b)("inlineCode",{parentName:"p"},"Hash")," or ",Object(l.b)("inlineCode",{parentName:"p"},"Sort")," algorithms. User can specify these configs\nas using Python ",Object(l.b)("inlineCode",{parentName:"p"},"str"),". "),Object(l.b)("p",null,"Sequential Join"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"csv_read_options = CSVReadOptions().use_threads(True).block_size(1 << 30)\n\ntb1: Table = read_csv(ctx, table1_path, csv_read_options)\n\ntb2: Table = read_csv(ctx, table2_path, csv_read_options)\n\ntb3: Table = tb1.join(table=tb2, join_type='inner', algorithm='hash', left_on=[0],\n                      right_on=[0])\n")),Object(l.b)("p",null,"Distributed Join"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"csv_read_options = CSVReadOptions().use_threads(True).block_size(1 << 30)\n\ntb1: Table = read_csv(ctx, table1_path, csv_read_options)\n\ntb2: Table = read_csv(ctx, table2_path, csv_read_options)\n\ntb3: Table = tb1.distributed_join(table=tb2, join_type='inner', algorithm='hash', left_on=[0],\n                                  right_on=[0])\n")),Object(l.b)("h3",{id:"union"},"Union"),Object(l.b)("p",null,"Sequential Union"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"tb4: Table = tb1.union(tb2)\n")),Object(l.b)("p",null,"Distributed Union"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"tb5: Table = tb1.distributed_union(table=tb2)\n")),Object(l.b)("h3",{id:"intersect"},"Intersect"),Object(l.b)("p",null,"Sequential Intersect"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"tb4: Table = tb1.intersect(table=tb2)\n")),Object(l.b)("p",null,"Distributed Intersect"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"tb5: Table = tb1.distributed_intersect(table=tb2)\n")),Object(l.b)("h3",{id:"subtract"},"Subtract"),Object(l.b)("p",null,"Sequential Subtract"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"tb4: Table = tb1.subtract(table=tb2)\n")),Object(l.b)("p",null,"Distributed Subtract"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"tb5: Table = tb1.distributed_subtract(table=tb2)\n")),Object(l.b)("h3",{id:"select"},"Select"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-Note"}),"This is not yet supported from PyCylon API, but LibCylon supports this.\n")),Object(l.b)("h2",{id:"python-examples"},"Python Examples"),Object(l.b)("ol",null,Object(l.b)("li",{parentName:"ol"},Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/cylondata/cylon/blob/master/python/examples/table_relational_algebra.py"}),"Relational Algebra Examples")),Object(l.b)("li",{parentName:"ol"},Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/cylondata/cylon/blob/master/python/examples/table_compute_examples.py"}),"Compute Examples")),Object(l.b)("li",{parentName:"ol"},Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/cylondata/cylon/blob/master/python/examples/table_initialization.py"}),"Table Initialization")),Object(l.b)("li",{parentName:"ol"},Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/cylondata/cylon/blob/master/python/examples/table_comparator_ops.py"}),"Table Conditional Comparator")),Object(l.b)("li",{parentName:"ol"},Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/cylondata/cylon/blob/master/python/examples/table_logical_operators.py"}),"Table Logical Comparators")),Object(l.b)("li",{parentName:"ol"},Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/cylondata/cylon/blob/master/python/examples/table_math_operators.py"}),"Table Math Operators")),Object(l.b)("li",{parentName:"ol"},Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/cylondata/cylon/blob/master/python/examples/table_data_setget.py"}),"Table Data Manipulation")),Object(l.b)("li",{parentName:"ol"},Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/cylondata/cylon/blob/master/python/examples/table_util_operators.py"}),"Table Util Operators")),Object(l.b)("li",{parentName:"ol"},Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/cylondata/cylon/blob/master/python/examples/table_conversions.py"}),"Table Conversions")),Object(l.b)("li",{parentName:"ol"},Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/cylondata/cylon/blob/master/python/examples/op_benchmark/compute_benchmark.py"}),"Table Compute Benchmarks")),Object(l.b)("li",{parentName:"ol"},Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/cylondata/cylon/blob/master/python/examples/op_benchmark/filter_benchmark.py"}),"Table Filter Benchmarks")),Object(l.b)("li",{parentName:"ol"},Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/cylondata/cylon/blob/master/python/examples/experiments/table_join_dist_test.py"}),"Table Distributed Join Experiments"))))}p.isMDXComponent=!0},91:function(e,t,a){"use strict";a.d(t,"a",(function(){return s})),a.d(t,"b",(function(){return y}));var n=a(0),r=a.n(n);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function b(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var i=r.a.createContext({}),p=function(e){var t=r.a.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):b(b({},t),e)),a},s=function(e){var t=p(e.components);return r.a.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,o=e.parentName,i=c(e,["components","mdxType","originalType","parentName"]),s=p(a),m=n,y=s["".concat(o,".").concat(m)]||s[m]||u[m]||l;return a?r.a.createElement(y,b(b({ref:t},i),{},{components:a})):r.a.createElement(y,b({ref:t},i))}));function y(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,o=new Array(l);o[0]=m;var b={};for(var c in t)hasOwnProperty.call(t,c)&&(b[c]=t[c]);b.originalType=e,b.mdxType="string"==typeof e?e:n,o[1]=b;for(var i=2;i<l;i++)o[i]=a[i];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,a)}m.displayName="MDXCreateElement"}}]);