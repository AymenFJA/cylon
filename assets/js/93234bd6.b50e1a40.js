(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{104:function(e,n,t){"use strict";t.d(n,"a",(function(){return s})),t.d(n,"b",(function(){return m}));var o=t(0),r=t.n(o);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var d=r.a.createContext({}),p=function(e){var n=r.a.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},s=function(e){var n=p(e.components);return r.a.createElement(d.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},b=r.a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),s=p(t),b=o,m=s["".concat(l,".").concat(b)]||s[b]||u[b]||a;return t?r.a.createElement(m,c(c({ref:n},d),{},{components:t})):r.a.createElement(m,c({ref:n},d))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,l=new Array(a);l[0]=b;var c={};for(var i in n)hasOwnProperty.call(n,i)&&(c[i]=n[i]);c.originalType=e,c.mdxType="string"==typeof e?e:o,l[1]=c;for(var d=2;d<a;d++)l[d]=t[d];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"},85:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return l})),t.d(n,"metadata",(function(){return c})),t.d(n,"toc",(function(){return i})),t.d(n,"default",(function(){return p}));var o=t(3),r=t(8),a=(t(0),t(104)),l={id:"docker",title:"Cylon Docker Image",sidebar_label:"Docker"},c={unversionedId:"docker",id:"docker",isDocsHomePage:!1,title:"Cylon Docker Image",description:"Cylon has a few heavy dependencies such as OpenMPI and Apache Arrow that needs to be compiled and configured",source:"@site/docs/docker.md",sourceDirName:".",slug:"/docker",permalink:"/docs/docker",editUrl:"https://github.com/cylondata/cylon/edit/master/docs/docs/docker.md",version:"current",sidebar_label:"Docker",frontMatter:{id:"docker",title:"Cylon Docker Image",sidebar_label:"Docker"},sidebar:"someSidebar",previous:{title:"Source Compilation",permalink:"/docs/"},next:{title:"Cylon Conda Binaries",permalink:"/docs/conda"}},i=[{value:"Get started with Docker",id:"get-started-with-docker",children:[]},{value:"Running Examples",id:"running-examples",children:[]},{value:"Developing Cylon Applications",id:"developing-cylon-applications",children:[{value:"Testing a distributed Cylon Application",id:"testing-a-distributed-cylon-application",children:[]}]}],d={toc:i};function p(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(a.b)("wrapper",Object(o.a)({},d,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Cylon has a few heavy dependencies such as OpenMPI and Apache Arrow that needs to be compiled and configured\nbefore start writing Cylon applications. While Cylon build takes care of these things for you, optionally\nfollowing approaches can be used to quick start with the development process."),Object(a.b)("h2",{id:"get-started-with-docker"},"Get started with Docker"),Object(a.b)("p",null,"Cylon docker images contains prebuilt cylon binaries and environment configured to start development right away."),Object(a.b)("p",null,"Start by creating a volume to hold you source code."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-bash"},"docker volume create cylon-vol\n")),Object(a.b)("p",null,"Then start a Cylon container as follows with your new volume mounted at /code."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-bash"},"docker run -it -v cylon-vol:/code cylondata/cylon\n")),Object(a.b)("p",null,"Optionally, you could skip creating a volume and mount a local folder to the /code directory."),Object(a.b)("h2",{id:"running-examples"},"Running Examples"),Object(a.b)("p",null,"The Cylon source and binaries are located at /cylon directory, and your development environment is already preloaded with everything you need to run a Cylon application locally. With the below command, you should be able to run sample applications."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-bash"},"cylon@d4872133cdee:~$ python3 /cylon/python/examples/dataframe/join.py\n")),Object(a.b)("h2",{id:"developing-cylon-applications"},"Developing Cylon Applications"),Object(a.b)("p",null,"It's crucial to save all your work into the /code directory mounted in the above step to prevent data losses."),Object(a.b)("p",null,"A cylon non-distributed application can be simple as follows. "),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},'from pycylon import DataFrame, read_csv\n\ndf1 = read_csv("file1.csv")\ndf1.set_index([0])\n\ndf2 = read_csv("file2.csv")\ndf2.set_index([0])\n\njoin = df1.merge(df2, left_on=[0], right_on=[0])\nprint(join)\n')),Object(a.b)("p",null,"Use the below command to activate the python virtual environment which comes preloaded with all the Cylon libraries."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-bash"},"cylon@d4872133cdee:~$ source /cylon/ENV/bin/activate\n")),Object(a.b)("p",null,"Assuming the above python file has been saved under /code/helloworld.py, it can be executed as follows."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-bash"},"(ENV) cylon@d4872133cdee:~$ python3 /code/helloworld.py\n")),Object(a.b)("h3",{id:"testing-a-distributed-cylon-application"},"Testing a distributed Cylon Application"),Object(a.b)("p",null,"A distributed cylon application will have an environment initialized as follows."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},'from pycylon import DataFrame, CylonEnv\nfrom pycylon.net import MPIConfig\nimport random\n\n# distributed join\nenv = CylonEnv(config=MPIConfig())\n\ndf1 = DataFrame([random.sample(range(10*env.rank, 15*(env.rank+1)), 5),\n                 random.sample(range(10*env.rank, 15*(env.rank+1)), 5)])\ndf2 = DataFrame([random.sample(range(10*env.rank, 15*(env.rank+1)), 5),\n                 random.sample(range(10*env.rank, 15*(env.rank+1)), 5)])\ndf2.set_index([0], inplace=True)\nprint("Distributed Join")\ndf3 = df1.join(other=df2, on=[0], env=env)\nprint(df3)\n\nenv.finalize()\n')),Object(a.b)("p",null,"To test a distributed application within the container, start you application with mpirun as follows. "),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-bash"},"(ENV) cylon@d4872133cdee:~$ mpirun -np 2 python3 /code/helloworld_distributed.py\n")))}p.isMDXComponent=!0}}]);