(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{104:function(e,n,a){"use strict";a.d(n,"a",(function(){return p})),a.d(n,"b",(function(){return m}));var t=a(0),o=a.n(t);function l(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function c(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function i(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?c(Object(a),!0).forEach((function(n){l(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):c(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function r(e,n){if(null==e)return{};var a,t,o=function(e,n){if(null==e)return{};var a,t,o={},l=Object.keys(e);for(t=0;t<l.length;t++)a=l[t],n.indexOf(a)>=0||(o[a]=e[a]);return o}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)a=l[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var d=o.a.createContext({}),b=function(e){var n=o.a.useContext(d),a=n;return e&&(a="function"==typeof e?e(n):i(i({},n),e)),a},p=function(e){var n=b(e.components);return o.a.createElement(d.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},u=o.a.forwardRef((function(e,n){var a=e.components,t=e.mdxType,l=e.originalType,c=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),p=b(a),u=t,m=p["".concat(c,".").concat(u)]||p[u]||s[u]||l;return a?o.a.createElement(m,i(i({ref:n},d),{},{components:a})):o.a.createElement(m,i({ref:n},d))}));function m(e,n){var a=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var l=a.length,c=new Array(l);c[0]=u;var i={};for(var r in n)hasOwnProperty.call(n,r)&&(i[r]=n[r]);i.originalType=e,i.mdxType="string"==typeof e?e:t,c[1]=i;for(var d=2;d<l;d++)c[d]=a[d];return o.a.createElement.apply(null,c)}return o.a.createElement.apply(null,a)}u.displayName="MDXCreateElement"},89:function(e,n,a){"use strict";a.r(n),a.d(n,"frontMatter",(function(){return c})),a.d(n,"metadata",(function(){return i})),a.d(n,"toc",(function(){return r})),a.d(n,"default",(function(){return b}));var t=a(3),o=a(8),l=(a(0),a(104)),c={id:"conda",title:"Cylon Conda Binaries",sidebar_label:"Conda"},i={unversionedId:"conda",id:"conda",isDocsHomePage:!1,title:"Cylon Conda Binaries",description:"PyCylon can be built using Conda. There are Conda packages for libcylon and pycylon.",source:"@site/docs/conda.md",sourceDirName:".",slug:"/conda",permalink:"/docs/conda",editUrl:"https://github.com/cylondata/cylon/edit/master/docs/docs/conda.md",version:"current",sidebar_label:"Conda",frontMatter:{id:"conda",title:"Cylon Conda Binaries",sidebar_label:"Conda"},sidebar:"someSidebar",previous:{title:"Cylon Docker Image",permalink:"/docs/docker"},next:{title:"Python",permalink:"/docs/python"}},r=[{value:"Installing from Conda",id:"installing-from-conda",children:[]},{value:"Building in a Conda environment",id:"building-in-a-conda-environment",children:[{value:"Install Conda &amp; Prerequisites",id:"install-conda--prerequisites",children:[]},{value:"Build Cylon",id:"build-cylon",children:[]}]},{value:"Developing in a Conda environment",id:"developing-in-a-conda-environment",children:[{value:"Setting up IDEs",id:"setting-up-ides",children:[]}]}],d={toc:r};function b(e){var n=e.components,a=Object(o.a)(e,["components"]);return Object(l.b)("wrapper",Object(t.a)({},d,a,{components:n,mdxType:"MDXLayout"}),Object(l.b)("p",null,"PyCylon can be built using Conda. There are Conda packages for libcylon and pycylon."),Object(l.b)("h2",{id:"installing-from-conda"},"Installing from Conda"),Object(l.b)("p",null,"The following command will install the latest version of Cylon."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-bash"},"conda create -n cylon-0.4.0 -c cylondata pycylon python=3.7\nconda activate cylon-0.4.0\n")),Object(l.b)("p",null,"Now you can run an example to see if everything is working fine."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"from pycylon import DataFrame, CylonEnv\nfrom pycylon.net import MPIConfig\n\ndf1 = DataFrame([[1, 2, 3], [2, 3, 4]])\ndf2 = DataFrame([[1, 1, 1], [2, 3, 4]])\ndf3 = df1.merge(right=df2, on=[0, 1])\nprint(df3)\n")),Object(l.b)("h2",{id:"building-in-a-conda-environment"},"Building in a Conda environment"),Object(l.b)("p",null,"Now lets try to build Cylon in a Conda environment."),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Ubuntu 16.04 or higher")),Object(l.b)("h3",{id:"install-conda--prerequisites"},"Install Conda & Prerequisites"),Object(l.b)("p",null,"First download and install Conda for your Linux distribution."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-bash"},"sudo apt update && sudo apt upgrade\nsudo apt install software-properties-common\nsudo add-apt-repository ppa:deadsnakes/ppa\nsudo apt-get install -y --no-install-recommends --no-install-suggests libssl-dev curl wget vim git build-essential python3.7-dev python3.7 maven libnuma-dev libc-dev python3-venv openmpi-bin libopenmpi-dev python3-pip python3-dev\n")),Object(l.b)("p",null,"Here are some commands used to install conda. Note this is an example and you can choose your own version of Conda."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-bash"},"wget https://repo.anaconda.com/archive/Anaconda3-2020.11-Linux-x86_64.sh\nchmod +x Anaconda3-2020.11-Linux-x86_64.sh\n./Anaconda3-2020.11-Linux-x86_64.sh\n")),Object(l.b)("p",null,"After installing conda we need to activate the conda environment. "),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},'eval "$(~/anaconda3/bin/conda shell.bash hook)"\n')),Object(l.b)("h3",{id:"build-cylon"},"Build Cylon"),Object(l.b)("p",null,"Here are the commands to build Cylon using the conda-build. These commands will build the Cylon and PyCylon packages.\nWe need conda-build package to build Cylon."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/cylondata/cylon.git\ncd cylon\n\nconda env create -f conda/environments/cylon.yml\nconda activate cylon_dev\nconda install conda-build\n\nconda-build conda/recipes/cylon/\nconda-build conda/recipes/pycylon/\n")),Object(l.b)("p",null,"Now you can install these packages into your conda environment. "),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-bash"},"conda install --use-local cylon\nconda install --use-local pycylon\n")),Object(l.b)("p",null,"If the above doesn't work use the following command to install in local environment."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-bash"},"conda install -c <pathto cylon conda artifcat> cylon\nconda install -c <pathto pycylon conda artifcat> pycylon\n")),Object(l.b)("p",null,"Here is an example command in a local machine"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-bash"},"conda install -c ~/anaconda3/envs/build_env/conda-bld/linux-64/pycylon-0.4.0-cylon_0.4_py37_gfa14527_455.tar.bz2 pycylon\n")),Object(l.b)("p",null,"After that you can use the package."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-bash"},"conda create -n cylon-0.4.0 -c cylondata pycylon python=3.7\nconda activate cylon-0.4.0\n")),Object(l.b)("h2",{id:"developing-in-a-conda-environment"},"Developing in a Conda environment"),Object(l.b)("p",null,"We can also use Conda environment for Cylon C++ and Python development. This is a very convenient\nway to get started with Cylon development and testing. "),Object(l.b)("ol",null,Object(l.b)("li",{parentName:"ol"},"Create a Conda environment with the dependencies, and activate the environment. Here we are using\nthe ",Object(l.b)("inlineCode",{parentName:"li"},"conda/environments/cylon.yml")," env file which creates ",Object(l.b)("inlineCode",{parentName:"li"},"cylon_dev")," environment.  ")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/cylondata/cylon.git\ncd cylon\n\nconda env create -f conda/environments/cylon.yml\nconda activate cylon_dev\n")),Object(l.b)("ol",{start:2},Object(l.b)("li",{parentName:"ol"},"Build Cylon against ",Object(l.b)("inlineCode",{parentName:"li"},"cylon_dev")," env. Here we are using the ",Object(l.b)("inlineCode",{parentName:"li"},"build.sh")," convenience script.  ")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-bash"},"./build.sh [-bpath <build dir>] [-j <num jobs>] --conda_cpp --conda_python [--test] [--pytest]\n")),Object(l.b)("p",null,"Here, Conda would build Cylon. Built files can be found in the ",Object(l.b)("inlineCode",{parentName:"p"},"-bpath")," directory (default:\n",Object(l.b)("inlineCode",{parentName:"p"},"$CYLON_HOME/build"),"). "),Object(l.b)("p",null,"Additionally, Cylon libraries would also be copied to ",Object(l.b)("inlineCode",{parentName:"p"},"$CONDA_PREFIX/lib")," and\n",Object(l.b)("inlineCode",{parentName:"p"},"$CONDA_PREFIX/include")," directories. "),Object(l.b)("h3",{id:"setting-up-ides"},"Setting up IDEs"),Object(l.b)("p",null,"In addition to use terminal, you can also use the Conda environment in your preferred IDE's. "),Object(l.b)("ol",null,Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"Open Cylon as a C++ project, and assign ",Object(l.b)("inlineCode",{parentName:"p"},"cylon/cpp/CmakeLists.txt")," as main CMake file.")),Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"Export ",Object(l.b)("inlineCode",{parentName:"p"},"CONDA_PREFIX=<path to env>")," environment variable for the IDE")),Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"Add a CMake build directory (ex: ",Object(l.b)("inlineCode",{parentName:"p"},"$CYLON_HOME/build"),")")),Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"Use the following CMake options"))),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-bash"},'-DCMAKE_INSTALL_PREFIX="$CONDA_PREFIX"\n-DARROW_BUILD_TYPE="SYSTEM"\n-DARROW_LIB_DIR="$CONDA_PREFIX/lib"\n-DARROW_INCLUDE_DIR="$CONDA_PREFIX/include"\n-DCYLON_PARQUET=ON # enable Cylon parquet \n-DPYCYLON_BUILD=ON # enable PyCylon \n-DCYLON_WITH_TEST=ON # run C++ tests \n')))}b.isMDXComponent=!0}}]);