(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{103:function(e,t,a){"use strict";a.d(t,"a",(function(){return s})),a.d(t,"b",(function(){return y}));var n=a(0),l=a.n(n);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function b(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var i=l.a.createContext({}),p=function(e){var t=l.a.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):b(b({},t),e)),a},s=function(e){var t=p(e.components);return l.a.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return l.a.createElement(l.a.Fragment,{},t)}},m=l.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,o=e.parentName,i=c(e,["components","mdxType","originalType","parentName"]),s=p(a),m=n,y=s["".concat(o,".").concat(m)]||s[m]||u[m]||r;return a?l.a.createElement(y,b(b({ref:t},i),{},{components:a})):l.a.createElement(y,b({ref:t},i))}));function y(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,o=new Array(r);o[0]=m;var b={};for(var c in t)hasOwnProperty.call(t,c)&&(b[c]=t[c]);b.originalType=e,b.mdxType="string"==typeof e?e:n,o[1]=b;for(var i=2;i<r;i++)o[i]=a[i];return l.a.createElement.apply(null,o)}return l.a.createElement.apply(null,a)}m.displayName="MDXCreateElement"},91:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return o})),a.d(t,"metadata",(function(){return b})),a.d(t,"toc",(function(){return c})),a.d(t,"default",(function(){return p}));var n=a(3),l=a(8),r=(a(0),a(103)),o={id:"python_table",title:"PyCylon Table API"},b={unversionedId:"python_table",id:"python_table",isDocsHomePage:!1,title:"PyCylon Table API",description:"PyCylon is the Python binding for LibCylon (C++ Cylon). The uniqueness of PyCylon",source:"@site/docs/python_table_deprecated.md",sourceDirName:".",slug:"/python_table",permalink:"/docs/python_table",editUrl:"https://github.com/cylondata/cylon/edit/master/docs/docs/python_table_deprecated.md",version:"current",frontMatter:{id:"python_table",title:"PyCylon Table API"}},c=[{value:"Table",id:"table",children:[{value:"Initialize",id:"initialize",children:[]},{value:"Load a Table",id:"load-a-table",children:[]},{value:"Join",id:"join",children:[]},{value:"Union",id:"union",children:[]},{value:"Intersect",id:"intersect",children:[]},{value:"Subtract",id:"subtract",children:[]},{value:"Select",id:"select",children:[]}]},{value:"Python Examples",id:"python-examples",children:[]},{value:"Logging",id:"logging",children:[]},{value:"Python API docs",id:"python-api-docs",children:[]}],i={toc:c};function p(e){var t=e.components,a=Object(l.a)(e,["components"]);return Object(r.b)("wrapper",Object(n.a)({},i,a,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"PyCylon is the Python binding for LibCylon (C++ Cylon). The uniqueness of PyCylon\nis that it can be used as a library or a framework. As a library, PyCylon seamlessly\nintegrates with PyArrow. This brings us the capability of providing the user the\ncompatibility with Pandas, Numpy and Tensors. As a framework we support distributed\nrelational algebra operations using MPI as the distributed backend."),Object(r.b)("h2",{id:"table"},"Table"),Object(r.b)("p",null,"PyCylon Table API currently offers a set of relational algebra operators to\npreprocess the data."),Object(r.b)("h3",{id:"initialize"},"Initialize"),Object(r.b)("p",null,"In a Cylon programme, if you use Cylon with ",Object(r.b)("inlineCode",{parentName:"p"},"MPI")," backend, the initialization\nmust be done as follows;"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},'ctx: CylonContext = CylonContext("mpi")\n')),Object(r.b)("p",null,"Without MPI,"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"ctx: CylonContext = CylonContext()\n")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-txt"},"Note: In the current release, Cylon only supports MPI as a distributed backend\n")),Object(r.b)("h3",{id:"load-a-table"},"Load a Table"),Object(r.b)("p",null,"Using Cylon"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"from pycylon Table\nfrom pycylon.io import read_csv\n\ntb1: Table = read_csv(ctx, '/tmp/csv.csv', ',')\n")),Object(r.b)("p",null,"Using PyArrow and convert to PyCylon Table"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"from pyarrow import csv\nfrom pycylon.data.table import Table\nfrom pyarrow import Table as PyArrowTable\n\npyarrow_tb: PyArrowTable = csv.read_csv('/tmp/csv.csv')\ncylon_tb = Table.from_arrow(pyarrow_tb)\n")),Object(r.b)("p",null,"Also a Cylon Table can be converted to a PyArrow Table"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"pyarrow_tb: PyArrowTable = cylon_tb.to_arrow()\n")),Object(r.b)("h3",{id:"join"},"Join"),Object(r.b)("p",null,"Join API supports ",Object(r.b)("inlineCode",{parentName:"p"},"left, right, inner, outer' joins")," with\n",Object(r.b)("inlineCode",{parentName:"p"},"Hash")," or ",Object(r.b)("inlineCode",{parentName:"p"},"Sort")," algorithms. User can specify these configs\nas using Python ",Object(r.b)("inlineCode",{parentName:"p"},"str"),"."),Object(r.b)("p",null,"Sequential Join"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"csv_read_options = CSVReadOptions().use_threads(True).block_size(1 << 30)\n\ntb1: Table = read_csv(ctx, table1_path, csv_read_options)\n\ntb2: Table = read_csv(ctx, table2_path, csv_read_options)\n\ntb3: Table = tb1.join(table=tb2, join_type='inner', algorithm='hash', left_on=[0],\n                      right_on=[0])\n")),Object(r.b)("p",null,"Distributed Join"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"csv_read_options = CSVReadOptions().use_threads(True).block_size(1 << 30)\n\ntb1: Table = read_csv(ctx, table1_path, csv_read_options)\n\ntb2: Table = read_csv(ctx, table2_path, csv_read_options)\n\ntb3: Table = tb1.distributed_join(table=tb2, join_type='inner', algorithm='hash', left_on=[0],\n                                  right_on=[0])\n")),Object(r.b)("h3",{id:"union"},"Union"),Object(r.b)("p",null,"Sequential Union"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"tb4: Table = tb1.union(tb2)\n")),Object(r.b)("p",null,"Distributed Union"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"tb5: Table = tb1.distributed_union(table=tb2)\n")),Object(r.b)("h3",{id:"intersect"},"Intersect"),Object(r.b)("p",null,"Sequential Intersect"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"tb4: Table = tb1.intersect(table=tb2)\n")),Object(r.b)("p",null,"Distributed Intersect"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"tb5: Table = tb1.distributed_intersect(table=tb2)\n")),Object(r.b)("h3",{id:"subtract"},"Subtract"),Object(r.b)("p",null,"Sequential Subtract"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"tb4: Table = tb1.subtract(table=tb2)\n")),Object(r.b)("p",null,"Distributed Subtract"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"tb5: Table = tb1.distributed_subtract(table=tb2)\n")),Object(r.b)("h3",{id:"select"},"Select"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-Note"},"This is not yet supported from PyCylon API, but LibCylon supports this.\n")),Object(r.b)("h2",{id:"python-examples"},"Python Examples"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},Object(r.b)("a",{parentName:"li",href:"https://github.com/cylondata/cylon/blob/master/python/examples/table_relational_algebra.py"},"Relational Algebra Examples")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("a",{parentName:"li",href:"https://github.com/cylondata/cylon/blob/master/python/examples/table_compute_examples.py"},"Compute Examples")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("a",{parentName:"li",href:"https://github.com/cylondata/cylon/blob/master/python/examples/table_initialization.py"},"Table Initialization")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("a",{parentName:"li",href:"https://github.com/cylondata/cylon/blob/master/python/examples/table_comparator_ops.py"},"Table Conditional Comparator")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("a",{parentName:"li",href:"https://github.com/cylondata/cylon/blob/master/python/examples/table_logical_operators.py"},"Table Logical Comparators")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("a",{parentName:"li",href:"https://github.com/cylondata/cylon/blob/master/python/examples/table_math_operators.py"},"Table Math Operators")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("a",{parentName:"li",href:"https://github.com/cylondata/cylon/blob/master/python/examples/table_data_setget.py"},"Table Data Manipulation")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("a",{parentName:"li",href:"https://github.com/cylondata/cylon/blob/master/python/examples/table_util_operators.py"},"Table Util Operators")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("a",{parentName:"li",href:"https://github.com/cylondata/cylon/blob/master/python/examples/table_conversions.py"},"Table Conversions")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("a",{parentName:"li",href:"https://github.com/cylondata/cylon/blob/master/python/examples/op_benchmark/compute_benchmark.py"},"Table Compute Benchmarks")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("a",{parentName:"li",href:"https://github.com/cylondata/cylon/blob/master/python/examples/op_benchmark/filter_benchmark.py"},"Table Filter Benchmarks")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("a",{parentName:"li",href:"https://github.com/cylondata/cylon/blob/master/python/examples/experiments/table_join_dist_test.py"},"Table Distributed Join Experiments"))),Object(r.b)("h2",{id:"logging"},"Logging"),Object(r.b)("p",null,"PyCylon is backed by a C++ implementation to accelerate the operations. C++ implementation writes logs to the console for debugging purposes.\nBy default, logging from C++ is disabled in PyCylon. However, logging can be enabled as follows by setting CYLON_LOG_LEVEL environment variable."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-bash"},"export CYLON_LOG_LEVEL=<log_level_flag>\npython python/examples/dataframe/join.py\n")),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:null},"Log Level"),Object(r.b)("th",{parentName:"tr",align:null},"Flag"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"INFO"),Object(r.b)("td",{parentName:"tr",align:null},"0")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"WARN"),Object(r.b)("td",{parentName:"tr",align:null},"1")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"ERROR"),Object(r.b)("td",{parentName:"tr",align:null},"2")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"FATAL"),Object(r.b)("td",{parentName:"tr",align:null},"3")))),Object(r.b)("p",null,"Additionally, this can be done programmatically as follows."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"from pycylon.util.logging import log_level, disable_logging\n\n\nlog_level(0) # set an arbitrary log level\ndisable_logging() # disable logging completely\n")),Object(r.b)("h2",{id:"python-api-docs"},"Python API docs"),Object(r.b)("p",null,"Use blow link to navigate to the PyCylon API docs."),Object(r.b)("a",{href:"/docs/python_api_docs"},"Python API docs"))}p.isMDXComponent=!0}}]);