(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{105:function(e,n,t){"use strict";t.d(n,"a",(function(){return s})),t.d(n,"b",(function(){return m}));var a=t(0),l=t.n(a);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var c=l.a.createContext({}),b=function(e){var n=l.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},s=function(e){var n=b(e.components);return l.a.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return l.a.createElement(l.a.Fragment,{},n)}},d=l.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),s=b(t),d=a,m=s["".concat(o,".").concat(d)]||s[d]||u[d]||i;return t?l.a.createElement(m,r(r({ref:n},c),{},{components:t})):l.a.createElement(m,r({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=d;var r={};for(var p in n)hasOwnProperty.call(n,p)&&(r[p]=n[p]);r.originalType=e,r.mdxType="string"==typeof e?e:a,o[1]=r;for(var c=2;c<i;c++)o[c]=t[c];return l.a.createElement.apply(null,o)}return l.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},91:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return r})),t.d(n,"toc",(function(){return p})),t.d(n,"default",(function(){return b}));var a=t(3),l=t(8),i=(t(0),t(105)),o={id:"compile",title:"Source Compilation",sidebar_label:"Source"},r={unversionedId:"compile",id:"compile",isDocsHomePage:!0,title:"Source Compilation",description:"Cylon has C++ core, Java and Python bindings. You can compile these in three steps.",source:"@site/docs/compile.md",sourceDirName:".",slug:"/",permalink:"/docs/",editUrl:"https://github.com/cylondata/cylon/edit/master/docs/docs/compile.md",version:"current",sidebar_label:"Source",frontMatter:{id:"compile",title:"Source Compilation",sidebar_label:"Source"},sidebar:"someSidebar",next:{title:"Cylon Docker Image",permalink:"/docs/docker"}},p=[{value:"Prerequisites",id:"prerequisites",children:[{value:"Python Environment",id:"python-environment",children:[]},{value:"Installing Dependencies Ubuntu",id:"installing-dependencies-ubuntu",children:[]},{value:"Installing Dependencies MacOS",id:"installing-dependencies-macos",children:[]}]},{value:"Build Cylon &amp; PyCylon on Linux or Mac OS",id:"build-cylon--pycylon-on-linux-or-mac-os",children:[{value:"Build C++ APIs",id:"build-c-apis",children:[]},{value:"Build Python APIs",id:"build-python-apis",children:[]},{value:"Running Tests",id:"running-tests",children:[]}]},{value:"Building Cylon With An Existing Arrow Installation",id:"building-cylon-with-an-existing-arrow-installation",children:[{value:"Building PyCylon",id:"building-pycylon",children:[]}]},{value:"Building OpenMPI From Source",id:"building-openmpi-from-source",children:[]}],c={toc:p};function b(e){var n=e.components,t=Object(l.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Cylon has C++ core, Java and Python bindings. You can compile these in three steps."),Object(i.b)("p",null,"Cylon can be build along with Arrow (Cylon will build Apache Arrow) or it can be build by pointing to an existing\nArrow installation."),Object(i.b)("p",null,"This document shows how to build Cylon on Linux and Mac OS. The first section of the document shows how to install\nthe required dependencies on Linux (Ubuntu) and Mac OS. After required dependencies are installed,\nthe compiling is similar in Linux and Mac OS."),Object(i.b)("h2",{id:"prerequisites"},"Prerequisites"),Object(i.b)("p",null,"Here are the prerequisites for compiling Cylon."),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"CMake 3.16.5"),Object(i.b)("li",{parentName:"ol"},"OpenMPI 4.0.1 or higher (You can use any other MPI version as well, we tested with OpenMPI)"),Object(i.b)("li",{parentName:"ol"},"Python 3.7 or higher"),Object(i.b)("li",{parentName:"ol"},"C++ 14 or higher")),Object(i.b)("h3",{id:"python-environment"},"Python Environment"),Object(i.b)("p",null,"We need to specify a Python environment to the build script. If you're using a virtual environment,\nmake sure to set the virtual environment path. Or you can specify /usr as the path if you're installing in the system path."),Object(i.b)("h4",{id:"create-a-virtual-environment"},"Create a virtual environment"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"cd  $HOME/cylon\npython3 -m venv ENV\nsource ENV/bin/activate\n")),Object(i.b)("p",null,"Here after we assume your Python ENV path is,"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"}," $HOME/cylon/ENV\n")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-txt"},"Note: User must install Pyarrow with the Cylon build to use Cylon APIs.\nDo not use a prior installed pyarrow in your python environment.\nUninstall it before running the setup.\n")),Object(i.b)("h3",{id:"installing-dependencies-ubuntu"},"Installing Dependencies Ubuntu"),Object(i.b)("p",null,"Cylon uses MPI for distributed execution. So we need an MPI version installed in the system. There are many implementations\nof MPI standard such as MPICH and OpenMPI. We have tested Cylon with OpenMPI and you should be able to use any other MPI implementation like\nMPICH as well. "),Object(i.b)("p",null,"In this document we will explain how to install OpenMPI. You can use the following command to install OpenMPI on\nan Ubuntu system. If you would like to build OpenMPI with custom options, please refer to their ",Object(i.b)("a",{parentName:"p",href:"https://www.open-mpi.org/faq/?category=building"},"documentation")," or you can\nfollow the quick tutorial at the end of the document to do so. "),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"sudo apt install libopenmpi-dev\n")),Object(i.b)("p",null,"Here are some of the other dependencies required. "),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"sudo apt install software-properties-common\nsudo add-apt-repository ppa:deadsnakes/ppa\nsudo apt-get update && apt-get install -y --no-install-recommends --no-install-suggests libssl-dev curl wget vim git build-essential python3.7-dev python3.7 maven libnuma-dev libc-dev python3-venv openmpi-bin libopenmpi-dev python3-pip python3-dev libutf8proc-dev libre2-dev\n")),Object(i.b)("p",null,"We need a later version of CMake. We can build cmake from source if the version in our system is less than 3.16.5."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"curl -OL https://github.com/Kitware/CMake/releases/download/v3.20.1/cmake-3.20.1.tar.gz\ntar -xvf cmake-3.20.1.tar.gz\ncd cmake-3.20.1\n./bootstrap\nmake\nsudo make install\n")),Object(i.b)("h3",{id:"installing-dependencies-macos"},"Installing Dependencies MacOS"),Object(i.b)("p",null,"You would need to install XCode and install an MPI version such as OpenMPI."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"brew install open-mpi\n")),Object(i.b)("p",null,"Once those are installed you are ready to compile Cylon on macos."),Object(i.b)("h2",{id:"build-cylon--pycylon-on-linux-or-mac-os"},"Build Cylon & PyCylon on Linux or Mac OS"),Object(i.b)("p",null,"Here we will walk you through building Cylon along with Apache Arrow."),Object(i.b)("p",null,"We have provided a build script to make the build process easier. It is found in Cylon source root directory.\nPlease note that Cylon will build Apache Arrow (both ",Object(i.b)("inlineCode",{parentName:"p"},"libarrow")," and ",Object(i.b)("inlineCode",{parentName:"p"},"pyarrow"),") alongside Cylon.  "),Object(i.b)("h3",{id:"build-c-apis"},"Build C++ APIs"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"./build.sh -pyenv <path to your environment> -bpath <path to cmake build directory> -ipath <path to binary install directory> --cpp [--release | --debug]\n")),Object(i.b)("p",null,"Example:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"# make the cylon cpp library install directory\nmkdir $HOME/cylon_install\n./build.sh -pyenv $HOME/cylon/ENV -bpath $HOME/cylon/build -ipath $HOME/cylon_install --cpp --release\n")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-txt"},"Note: The default build mode is release \n")),Object(i.b)("p",null,"Now lets try to run an C++ example and see whether our compilation is successful."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"# export the lib path\nexport LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$HOME/cylon_install/lib\ncd $HOME/cylon_install\n# this will run the join example with randomly generated data\n./examples/join_example m o 40000 1 sort\n")),Object(i.b)("p",null,"It will generate an output like following. "),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"I0714 01:49:30.757613 867371 join_example.cpp:57] Sort join algorithm\nI0714 01:49:30.763633 867371 join_example.cpp:79] Read tables in 363[ms]\nI0714 01:49:30.840909 867371 partition_op.cpp:80] 0 Partition start: Wed Jul 14 01:49:30 2021 time: 0\nI0714 01:49:30.843380 867371 all_to_all_op.cpp:72] Shuffle time: 2\nI0714 01:49:30.851606 867371 split_op.cpp:152] Split time: 10 Fin time: 8 Split time: 2 Call count: 1\nI0714 01:49:30.852095 867371 partition_op.cpp:80] 0 Partition start: Wed Jul 14 01:49:30 2021 time: 0\nI0714 01:49:30.854277 867371 all_to_all_op.cpp:72] Shuffle time: 2\nI0714 01:49:30.862313 867371 split_op.cpp:152] Split time: 10 Fin time: 8 Split time: 2 Call count: 1\nI0714 01:49:30.953450 867371 join_kernel.cpp:57] Done concatenating tables, rows :  39712\nI0714 01:49:30.976418 867371 join_op.cpp:46] Join time : 110\nI0714 01:49:31.037182 867371 join_example.cpp:100] First table had : 40000 and Second table had : 40000, Joined has : 39712\nI0714 01:49:31.038038 867371 join_example.cpp:102] Join done in 272[ms]\n")),Object(i.b)("h3",{id:"build-python-apis"},"Build Python APIs"),Object(i.b)("p",null,"Cylon provides Python APIs with Cython. Cylon will build, Cylon CPP, Cylon Python, Arrow CPP and Arrow Python here. In this mode\nit will install the Cylon and PyCylon libraries to the Python environment using pip. We only support pip through source builds.\nIf you want to use an existing Cylon binary you would need to use Conda packages. "),Object(i.b)("p",null,"You can use the following command to build the Python library."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"./build.sh -pyenv <path to your environment> -bpath <path to cmake build directory> --python\n")),Object(i.b)("p",null,"Here is an example command."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"./build.sh -pyenv $HOME/cylon/ENV -bpath $HOME/cylon/build -ipath $HOME/cylon_install --python\n")),Object(i.b)("p",null,"This command will install the PyCylon and PyArrow into the virtual environment we specified. "),Object(i.b)("h4",{id:"updating-library-path"},"Updating library path"),Object(i.b)("p",null,"Before running the code in the base path of the cloned repo you need to update the runtime library path. Linux and Mac OS uses different environment variable names.\nFollowing are two commands to update the path on these operating systems. "),Object(i.b)("h4",{id:"linux"},"Linux"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"export LD_LIBRARY_PATH=<path to cmake build dir>/arrow/install/lib:<path to cmake build dir>/lib:$LD_LIBRARY_PATH\n")),Object(i.b)("p",null,"Here is an example command."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"export LD_LIBRARY_PATH=$HOME/cylon/build/arrow/install/lib:$HOME/cylon/build/lib:$LD_LIBRARY_PATH\n")),Object(i.b)("h4",{id:"mac-os"},"Mac OS"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"export DYLD_LIBRARY_PATH=<path to cmake build dir>/arrow/install/lib:<path to cmake build dir>/lib:$DYLD_LIBRARY_PATH\n")),Object(i.b)("p",null,"Here is an example command."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"export DYLD_LIBRARY_PATH=$HOME/cylon/build/arrow/install/lib:$HOME/cylon/build/lib:$DYLD_LIBRARY_PATH\n")),Object(i.b)("p",null,"After this you can verify the build."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"source ENV/bin/activate\n")),Object(i.b)("p",null,"Here is an example PyCylon programs to check whether installation is working."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"from pycylon import DataFrame, CylonEnv\nfrom pycylon.net import MPIConfig\n\ndf1 = DataFrame([[1, 2, 3], [2, 3, 4]])\ndf2 = DataFrame([[1, 1, 1], [2, 3, 4]])\ndf3 = df1.merge(right=df2, on=[0, 1])\nprint(df3)\n")),Object(i.b)("p",null,"Congratulations you now have successfully installed PyCylon and Cylon."),Object(i.b)("h3",{id:"running-tests"},"Running Tests"),Object(i.b)("p",null,"You can run Cylon tests as follows. "),Object(i.b)("p",null,"For C++ tests "),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"./build.sh -pyenv <path to your environment> -bpath <path to cmake build directory> --cpp --test\n")),Object(i.b)("p",null,"Here is an example command."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"./build.sh -pyenv $HOME/cylon/ENV -bpath $HOME/cylon/build --cpp --test\n")),Object(i.b)("p",null,"For Python tests"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"./build.sh -pyenv <path to your environment> -bpath <path to cmake build directory> --python --pytest\n")),Object(i.b)("p",null,"Here is an example command"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"./build.sh -pyenv $HOME/cylon/ENV -bpath $HOME/cylon/build --python --test\n")),Object(i.b)("h2",{id:"building-cylon-with-an-existing-arrow-installation"},"Building Cylon With An Existing Arrow Installation"),Object(i.b)("p",null,"If you already have an arrow installation and wants to use that for the build, you can do so by pointing the build to that."),Object(i.b)("h3",{id:"building-pycylon"},"Building PyCylon"),Object(i.b)("p",null,"Instead of building PyCylon and Apache Arrow together, you can use ",Object(i.b)("a",{parentName:"p",href:"https://pypi.org/project/pyarrow/"},Object(i.b)("inlineCode",{parentName:"a"},"pyarrow")," distribution from",Object(i.b)("inlineCode",{parentName:"a"},"pip"))," as follows.\nThis will build only the Cylon C++ and Python APIs. Here we will use the arrow libraries from the PyArrow installation."),Object(i.b)("p",null,"First lets create a Python environment and install PyArrow in it. "),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"python3 -m venv ENV\nsource ENV/bin/activate \npip install pyarrow==4.0.0\n")),Object(i.b)("p",null,"Then we can build Cylon pointing to this pyarrow with the following command."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"./build.sh -pyenv <path to your env> -bpath <path to cmake build dir> --python_with_pyarrow  [--test | --pytest]\n")),Object(i.b)("p",null,"Here is an example command."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"cd $HOME/cylon\n./build.sh -pyenv $HOME/cylon/ENV -bpath $HOME/cylon/build --python_with_pyarrow\n")),Object(i.b)("p",null,"After this you can run the above PyCylon examples to make sure it is working."),Object(i.b)("h2",{id:"building-openmpi-from-source"},"Building OpenMPI From Source"),Object(i.b)("p",null,"In this section we will explain how to build and install OpenMPI 4.0.1 from source. The instructions can be used to build a higher\nversion of OpenMPI as well."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"We recommend using ",Object(i.b)("inlineCode",{parentName:"p"},"OpenMPI 4.0.1")," or higher.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Download OpenMPI 4.0.1 from ",Object(i.b)("a",{parentName:"p",href:"https://download.open-mpi.org/release/open-mpi/v4.0/openmpi-4.0.1.tar.gz"},"https://download.open-mpi.org/release/open-mpi/v4.0/openmpi-4.0.1.tar.gz"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Extract the archive to a folder named ",Object(i.b)("inlineCode",{parentName:"p"},"openmpi-4.0.1"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Also create a directory named ",Object(i.b)("inlineCode",{parentName:"p"},"build")," in some location. We will use this to install OpenMPI")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Set the following environment variables"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-text"},"BUILD=<path-to-build-directory>\nOMPI_401=<path-to-openmpi-4.0.1-directory>\nPATH=$BUILD/bin:$PATH\nLD_LIBRARY_PATH=$BUILD/lib:$LD_LIBRARY_PATH\nexport BUILD OMPI_401 PATH LD_LIBRARY_PATH\n"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"The instructions to build OpenMPI depend on the platform. Therefore, we highly recommend looking into the ",Object(i.b)("inlineCode",{parentName:"p"},"$OMPI_401/INSTALL")," file. Platform specific build files are available in ",Object(i.b)("inlineCode",{parentName:"p"},"$OMPI_401/contrib/platform")," directory.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"In general, please specify ",Object(i.b)("inlineCode",{parentName:"p"},"--prefix=$BUILD")," and ",Object(i.b)("inlineCode",{parentName:"p"},"--enable-mpi-java")," as arguments to ",Object(i.b)("inlineCode",{parentName:"p"},"configure")," script. If Infiniband is available ","(","highly recommended",")"," specify ",Object(i.b)("inlineCode",{parentName:"p"},"--with-verbs=<path-to-verbs-installation>"),". Usually, the path to verbs installation is ",Object(i.b)("inlineCode",{parentName:"p"},"/usr"),". In summary, the following commands will build OpenMPI for a Linux system."),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-text"},"cd $OMPI_401\n./configure --prefix=$BUILD --enable-mpi-java\nmake -j 8;make install\n")))))}b.isMDXComponent=!0}}]);