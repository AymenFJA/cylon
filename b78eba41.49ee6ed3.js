(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{78:function(e,n,a){"use strict";a.r(n),a.d(n,"frontMatter",(function(){return o})),a.d(n,"metadata",(function(){return c})),a.d(n,"rightToc",(function(){return b})),a.d(n,"default",(function(){return p}));var t=a(3),l=a(7),r=(a(0),a(91)),o={id:"python_api_docs",title:"PyCylon API Docs"},c={unversionedId:"python_api_docs",id:"python_api_docs",isDocsHomePage:!1,title:"PyCylon API Docs",description:"Imports",source:"@site/docs/python_api.md",slug:"/python_api_docs",permalink:"/docs/python_api_docs",editUrl:"https://github.com/cylondata/cylon/edit/master/docs/docs/python_api.md",version:"current"},b=[{value:"Imports",id:"imports",children:[]},{value:"Context",id:"context",children:[{value:"Sequential Programming",id:"sequential-programming",children:[]},{value:"Distributed Programmging",id:"distributed-programmging",children:[]},{value:"Rank",id:"rank",children:[]},{value:"World Size",id:"world-size",children:[]},{value:"Finalize",id:"finalize",children:[]},{value:"Barrier",id:"barrier",children:[]}]},{value:"Initialize Table",id:"initialize-table",children:[{value:"Using a List",id:"using-a-list",children:[]},{value:"Using a Dictionary",id:"using-a-dictionary",children:[]},{value:"Using a PyArrow Table",id:"using-a-pyarrow-table",children:[]},{value:"Using Numpy",id:"using-numpy",children:[]},{value:"Using Pandas",id:"using-pandas",children:[]}]},{value:"Convert Table",id:"convert-table",children:[{value:"To a PyArrow Table",id:"to-a-pyarrow-table",children:[]},{value:"To Pandas",id:"to-pandas",children:[]},{value:"To Numpy",id:"to-numpy",children:[]},{value:"To Dictionary",id:"to-dictionary",children:[]}]},{value:"I/O Operations",id:"io-operations",children:[{value:"Read from CSV",id:"read-from-csv",children:[]},{value:"Write to CSV",id:"write-to-csv",children:[]}]},{value:"Properties",id:"properties",children:[{value:"Column Names",id:"column-names",children:[]},{value:"Column Count",id:"column-count",children:[]},{value:"Shape",id:"shape",children:[]},{value:"Row Count",id:"row-count",children:[]},{value:"Context",id:"context-1",children:[]}]},{value:"Relational Algebra Operators",id:"relational-algebra-operators",children:[{value:"Join",id:"join",children:[]},{value:"Subtract (Difference)",id:"subtract-difference",children:[]},{value:"Intersect",id:"intersect",children:[]},{value:"Project",id:"project",children:[]}]},{value:"Aggregation Operations",id:"aggregation-operations",children:[]},{value:"SUM",id:"sum",children:[]},{value:"Min",id:"min",children:[]},{value:"Max",id:"max",children:[]},{value:"Count",id:"count",children:[]},{value:"GroupBy",id:"groupby",children:[]},{value:"Comparison Operators",id:"comparison-operators",children:[{value:"Equal",id:"equal",children:[]},{value:"Not Equal",id:"not-equal",children:[]},{value:"Lesser Than",id:"lesser-than",children:[]},{value:"Greater Than",id:"greater-than",children:[]},{value:"Lesser Than Equal",id:"lesser-than-equal",children:[]},{value:"Greater Than Equal",id:"greater-than-equal",children:[]}]},{value:"Logical Operators",id:"logical-operators",children:[{value:"Or",id:"or",children:[]},{value:"And",id:"and",children:[]},{value:"Invert",id:"invert",children:[]}]},{value:"Math Operators",id:"math-operators",children:[{value:"Negation",id:"negation",children:[]},{value:"Add",id:"add",children:[]},{value:"Subtract",id:"subtract",children:[]},{value:"Multiply",id:"multiply",children:[]},{value:"Division",id:"division",children:[]}]},{value:"Drop",id:"drop",children:[]},{value:"Fillna",id:"fillna",children:[]},{value:"Where",id:"where",children:[]},{value:"IsNull",id:"isnull",children:[]},{value:"IsNA",id:"isna",children:[]},{value:"Not Null",id:"not-null",children:[]},{value:"Not NA",id:"not-na",children:[]},{value:"Rename",id:"rename",children:[]},{value:"Add Prefix",id:"add-prefix",children:[]},{value:"Add Suffix",id:"add-suffix",children:[]},{value:"Index",id:"index",children:[]},{value:"Set Index",id:"set-index",children:[]},{value:"DropNa",id:"dropna",children:[]}],i={rightToc:b};function p(e){var n=e.components,a=Object(l.a)(e,["components"]);return Object(r.b)("wrapper",Object(t.a)({},i,a,{components:n,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"imports"},"Imports"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),">>> from pycylon import Table\n>>> from pycylon import CylonContext\n")),Object(r.b)("h2",{id:"context"},"Context"),Object(r.b)("p",null,"Initializing the Cylon Context based on the distributed or non-distributed context\nArgs:\nconfig: an object extended from pycylon.net.CommConfig, pycylon.net.MPIConfig for MPI\nbackend\ndistributed: bool to set distributed setting True or False\nReturns: None"),Object(r.b)("h3",{id:"sequential-programming"},"Sequential Programming"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),">>>  ctx: CylonContext = CylonContext(config=None, distributed=False)\n")),Object(r.b)("h3",{id:"distributed-programmging"},"Distributed Programmging"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),">>> from pycylon.net import MPIConfig\n>>> mpi_config = MPIConfig()\n>>> ctx: CylonContext = CylonContext(config=mpi_config, distributed=True)\n")),Object(r.b)("h3",{id:"rank"},"Rank"),Object(r.b)("p",null,"This is the process id (unique per process)\n:return: an int as the rank (0 for non distributed mode)"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),">>> ctx.get_rank()\n    1\n")),Object(r.b)("h3",{id:"world-size"},"World Size"),Object(r.b)("p",null,"This is the total number of processes joined for the distributed task\n:return: an int as the world size  (1 for non distributed mode)"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),">>> ctx.get_world_size()\n    4\n")),Object(r.b)("h3",{id:"finalize"},"Finalize"),Object(r.b)("p",null,"Gracefully shuts down the context by closing any distributed processes initialization ,etc\n:return: None"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),">>> ctx.finalize()\n")),Object(r.b)("h3",{id:"barrier"},"Barrier"),Object(r.b)("p",null,"Calling barrier to sync workers"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),">>> ctx.barrier()\n")),Object(r.b)("h2",{id:"initialize-table"},"Initialize Table"),Object(r.b)("h3",{id:"using-a-list"},"Using a List"),Object(r.b)("p",null,"Creating a PyCylon table from a list\nArgs:\ncontext: pycylon.CylonContext\ncol_names: Column names as a List","[str]","\ndata_list: data as a List of List, (List per column)"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{}),"    Returns: PyCylon Table\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),">>> Table.from_list(ctx, ['col-1', 'col-2', 'col-3'], [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\n       col-1  col-2  col-3\n    0      1      5      9\n    1      2      6     10\n    2      3      7     11\n    3      4      8     12\n")),Object(r.b)("h3",{id:"using-a-dictionary"},"Using a Dictionary"),Object(r.b)("p",null,"Creating a PyCylon table from a dictionary\nArgs:\ncontext: pycylon.CylonContext\ndictionary: dict object with key as column names and values as a List"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{}),"    Returns: PyCylon Table\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),">>> Table.from_pydict(ctx, {'col-1': [1, 2, 3, 4], 'col-2': [5, 6, 7, 8], 'col-3': [9, 10, 11, 12]})\n       col-1  col-2  col-3\n    0      1      5      9\n    1      2      6     10\n    2      3      7     11\n    3      4      8     12\n")),Object(r.b)("h3",{id:"using-a-pyarrow-table"},"Using a PyArrow Table"),Object(r.b)("p",null,"Creating a PyCylon table from PyArrow Table\nArgs:\ncontext: pycylon.CylonContext\npyarrow_table: PyArrow Table"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{}),"    Returns: PyCylon Table\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),">>> atb\n    pyarrow.Table\n    col-1: int64\n    col-2: int64\n    col-3: int64\n\n>>> Table.from_arrow(ctx, atb)\n       col-1  col-2  col-3\n    0      1      5      9\n    1      2      6     10\n    2      3      7     11\n    3      4      8     12\n")),Object(r.b)("h3",{id:"using-numpy"},"Using Numpy"),Object(r.b)("p",null,"Creating a PyCylon table from numpy arrays\nArgs:\ncontext: pycylon.CylonContext\ncol_names: column names as a List\nar_list: Numpy ndarrays as a list (one 1D array per column)"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{}),"    Returns: PyCylon Table\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),">>> Table.from_numpy(ctx, ['c1', 'c2', 'c3'], [np.array([1, 2, 3, 4]), np.array([5, 6, 7, 8]), np.array([9, 10, 11, 12])])\n       c1  c2  c3\n    0   1   5   9\n    1   2   6  10\n    2   3   7  11\n    3   4   8  12\n")),Object(r.b)("h3",{id:"using-pandas"},"Using Pandas"),Object(r.b)("p",null,"Creating a PyCylon table from Pandas DataFrame\nArgs:\ncontext: cylon.CylonContext\ndf: pd.DataFrame\npreserve_index: keep indexes as same as in original DF\nnthreads: number of threads for the operation\ncolumns: column names, if updated\nsafe: safe operation"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{}),"    Returns: PyCylon Table\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),">>> df\n        col-1  col-2  col-3\n    0      1      5      9\n    1      2      6     10\n    2      3      7     11\n    3      4      8     12\n\n>>> Table.from_pandas(ctx, df)\n        col-1  col-2  col-3\n    0      1      5      9\n    1      2      6     10\n    2      3      7     11\n    3      4      8     12\n")),Object(r.b)("h2",{id:"convert-table"},"Convert Table"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),">>> tb\n       col-1  col-2  col-3\n    0      1      5      9\n    1      2      6     10\n    2      3      7     11\n    3      4      8     12\n\n")),Object(r.b)("h3",{id:"to-a-pyarrow-table"},"To a PyArrow Table"),Object(r.b)("p",null,"Creating PyArrow Table from PyCylon table\nReturn: PyArrow Table"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),">>> tb.to_arrow()\npyarrow.Table\ncol-1: int64\ncol-2: int64\ncol-3: int64\n")),Object(r.b)("h3",{id:"to-pandas"},"To Pandas"),Object(r.b)("p",null,"Creating Pandas Dataframe from PyCylon Table\nReturns: pd.DataFrame"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),">>> tb.to_pandas()\n       col-1  col-2  col-3\n    0      1      5      9\n    1      2      6     10\n    2      3      7     11\n    3      4      8     12\n")),Object(r.b)("h3",{id:"to-numpy"},"To Numpy"),Object(r.b)("p",null,"Add ",Object(r.b)("inlineCode",{parentName:"p"},"order")," as ",Object(r.b)("inlineCode",{parentName:"p"},"F")," or ",Object(r.b)("inlineCode",{parentName:"p"},"C")," to get ",Object(r.b)("inlineCode",{parentName:"p"},"F_CONTIGUOUS")," or ",Object(r.b)("inlineCode",{parentName:"p"},"C_CONTIGUOUS")," Numpy array.\nThe default does a zero copy. But for bool values make sure to add ",Object(r.b)("inlineCode",{parentName:"p"},"zero_copy_only"),"\nto ",Object(r.b)("inlineCode",{parentName:"p"},"False"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),">>> tb.to_numpy(order='F')\n[[ 1  5  9]\n [ 2  6 10]\n [ 3  7 11]\n [ 4  8 12]]\n")),Object(r.b)("h3",{id:"to-dictionary"},"To Dictionary"),Object(r.b)("p",null,"Creating a dictionary from PyCylon table\nReturns: dict object"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),">>> tb.to_pydict()\n    {'col-1': [1, 2, 3, 4], 'col-2': [5, 6, 7, 8], 'col-3': [9, 10, 11, 12]}\n")),Object(r.b)("h2",{id:"io-operations"},"I/O Operations"),Object(r.b)("h3",{id:"read-from-csv"},"Read from CSV"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),">>> from pycylon.io import CSVReadOptions\n>>> from pycylon.io import read_csv\n>>> csv_read_options = CSVReadOptions().with_delimiter('::').use_threads(True).block_size(1 << 30)\n>>> read_csv(ctx, '/tmp/data.csv', csv_read_options)\n       col-1  col-2  col-3\n    0      1      5      9\n    1      2      6     10\n    2      3      7     11\n    3      4      8     12\n")),Object(r.b)("h3",{id:"write-to-csv"},"Write to CSV"),Object(r.b)("p",null,"Creating a csv file with PyCylon table data\nArgs:\npath: path to file\ncsv_write_options: pycylon.io.CSVWriteOptions"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{}),"    Returns: None\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),">>> from pycylon.io import CSVWriteOptions\n>>> csv_write_options = CSVWriteOptions().with_delimiter(',')\n>>> tb.to_csv('/tmp/data.csv', csv_write_options)\n")),Object(r.b)("h2",{id:"properties"},"Properties"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),">>> tb\n       col-1  col-2  col-3\n    0      1      5      9\n    1      2      6     10\n    2      3      7     11\n    3      4      8     12\n\n")),Object(r.b)("h3",{id:"column-names"},"Column Names"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),">>> tb.column_names\n    ['col-1', 'col-2', 'col-3']\n")),Object(r.b)("h3",{id:"column-count"},"Column Count"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),">>> tb.column_count\n    3\n")),Object(r.b)("h3",{id:"shape"},"Shape"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),">>> tb.shape\n    (4, 3)\n")),Object(r.b)("h3",{id:"row-count"},"Row Count"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),">>> tb.row_count\n")),Object(r.b)("h3",{id:"context-1"},"Context"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),">>> tb.context\n    <pycylon.ctx.context.CylonContext object at 0x7fb4f4d301e0>\n")),Object(r.b)("h2",{id:"relational-algebra-operators"},"Relational Algebra Operators"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),">>> tb = Table.from_pydict(ctx, {'keyA': ['K0', 'K1', 'K2', 'K3', 'K4', 'K5'],\n                                    'A': ['A0', 'A1', 'A2', 'A3', 'A4', 'A5']})\n      keyA   A\n    0   K0  A0\n    1   K1  A1\n    2   K2  A2\n    3   K3  A3\n    4   K4  A4\n    5   K5  A5\n>>> other = Table.from_pydict(ctx, {'keyB': ['K0', 'K1', 'K2'],\n                                       'B': ['B0', 'B1', 'B2']})\n      keyB   B\n    0   K0  B0\n    1   K1  B1\n    2   K2  B2\n")),Object(r.b)("h3",{id:"join"},"Join"),Object(r.b)("p",null,"Joins two PyCylon tables\n:param table: PyCylon table on which the join is performed (becomes the left table)\n:param join_type: Join Type as str ",'["inner", "left", "right", "outer"]',"\n:param algorithm: Join Algorithm as str ",'["hash", "sort"]',"\n:kwargs left_on: Join column of the left table as List","[int]"," or List","[str]",", right_on:\nJoin column of the right table as List","[int]"," or List","[str]",", on: Join column in common with\nboth tables as a List","[int]"," or List","[str]",".\nReturn: Joined PyCylon table"),Object(r.b)("p",null,"Note: The print methods are work in progress to provide similar output as Pandas"),Object(r.b)("p",null,"In sequential setting use ",Object(r.b)("inlineCode",{parentName:"p"},"join")," and in distributed setting use ",Object(r.b)("inlineCode",{parentName:"p"},"distributed_join")," upon the\nuse-case."),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),">>> tb.join(table=other, join_type='left', algorithm='sort', left_on=['keyA'], right_on=[\n    'keyB'])\n      keyA   A keyB   B\n    0   K0  A0   K0  B0\n    1   K1  A1   K1  B1\n    2   K2  A2   K2  B2\n    3   K3  A3\n    4   K4  A4\n    5   K5  A5\n")),Object(r.b)("h3",{id:"subtract-difference"},"Subtract (Difference)"),Object(r.b)("p",null,"For distributed operations use ",Object(r.b)("inlineCode",{parentName:"p"},"distributed_subtract")," instead of ",Object(r.b)("inlineCode",{parentName:"p"},"subtract"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),">>> tb = Table.from_pydict(ctx, {'keyA': ['K0', 'K1', 'K2', 'K3', 'K4', 'K5'],\n                                    'A': ['A0', 'A1', 'A2', 'A3', 'A4', 'A5']})\n      keyA   A\n    0   K0  A0\n    1   K1  A1\n    2   K2  A2\n    3   K3  A3\n    4   K4  A4\n\n>>> other = other: Table = Table.from_pydict(ctx, {'keyB': ['K0', 'K1', 'K2'],\n                                       'B': ['A0', 'A1', 'A2']})\n      keyB   B\n    0   K0  A0\n    1   K1  A1\n    2   K2  A2\n\n>>> tb.subtract(other)\n      keyA   A\n    0   K5  A5\n    1   K4  A4\n    2   K3  A3\n")),Object(r.b)("h3",{id:"intersect"},"Intersect"),Object(r.b)("p",null,"For distributed operations use ",Object(r.b)("inlineCode",{parentName:"p"},"distributed_intersect")," instead of ",Object(r.b)("inlineCode",{parentName:"p"},"intersect"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),">>> tb = Table.from_pydict(ctx, {'keyA': ['K0', 'K1', 'K2', 'K3', 'K4', 'K5'],\n                                    'A': ['A0', 'A1', 'A2', 'A3', 'A4', 'A5']})\n      keyA   A\n    0   K0  A0\n    1   K1  A1\n    2   K2  A2\n    3   K3  A3\n    4   K4  A4\n\n>>> other = other: Table = Table.from_pydict(ctx, {'keyB': ['K0', 'K1', 'K2'],\n                                       'B': ['A0', 'A1', 'A2']})\n      keyB   B\n    0   K0  A0\n    1   K1  A1\n    2   K2  A2\n\n>>> tb.intersect(other)\n      keyA   A\n    0   K2  A2\n    1   K1  A1\n    2   K0  A0\n")),Object(r.b)("h3",{id:"project"},"Project"),Object(r.b)("p",null,"For distributed operations and sequential operations ",Object(r.b)("inlineCode",{parentName:"p"},"project")," can be used."),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),">>> tb = Table.from_pydict(ctx, {'keyA': ['K0', 'K1', 'K2', 'K3', 'K4', 'K5'],\n                                    'A': ['A0', 'A1', 'A2', 'A3', 'A4', 'A5']})\n      keyA   A\n    0   K0  A0\n    1   K1  A1\n    2   K2  A2\n    3   K3  A3\n    4   K4  A4\n\n>>> tb.project(['A'])\n        A\n    0  A0\n    1  A1\n    2  A2\n    3  A3\n    4  A4\n    5  A5\n")),Object(r.b)("h2",{id:"aggregation-operations"},"Aggregation Operations"),Object(r.b)("p",null,"Currently supports, Sum, Min, Max, Count"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),">>> tb = Table.from_pydict(ctx, {'A': [10, 12, 20, 13, 14, 1, 0],\n                                    'B': [13, 14, 10, 19, 114, -1, 5]})\n        A    B\n    0  10   13\n    1  12   14\n    2  20   10\n    3  13   19\n    4  14  114\n    5   1   -1\n    6   0    5\n\n")),Object(r.b)("h2",{id:"sum"},"SUM"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),">>> tb.sum('A')\n        A\n    0  70\n\n")),Object(r.b)("h2",{id:"min"},"Min"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),">>> tb.min('A')\n       A\n    0  0\n")),Object(r.b)("h2",{id:"max"},"Max"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),">>> tb.max('A')\n        A\n    0  20\n")),Object(r.b)("h2",{id:"count"},"Count"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),">>> tb.count('A')\n       A\n    0  7\n")),Object(r.b)("h2",{id:"groupby"},"GroupBy"),Object(r.b)("p",null,"Group by operations support aggregations."),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),">>> tb\n       AnimalId  Max Speed\n    0         1      380.0\n    1         1      370.0\n    2         2       24.0\n    3         2       26.0\n    4         3       23.1\n    5         4      300.1\n    6         4      310.2\n    7         3       25.2\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),">>> from pycylon.data.aggregates import AggregationOp\n>>> tb.groupby(0, [1], [AggregationOp.SUM])\n       AnimalId  Max Speed\n    0         4      610.3\n    1         3       48.3\n    2         2       50.0\n    3         1      750.0\n\n>>>\n")),Object(r.b)("h2",{id:"comparison-operators"},"Comparison Operators"),Object(r.b)("h3",{id:"equal"},"Equal"),Object(r.b)("p",null,"Equal operator for Table\nArgs:\nother: can be a numeric scalar or a Table"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{}),"    Returns: PyCylon Table\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),">>> tb\n       col-1  col-2  col-3\n    0      1      5      9\n    1      2      6     10\n    2      3      7     11\n    3      4      8     12\n\n>>> tb['col-1'] == 2\n       col-1\n    0  False\n    1   True\n    2  False\n    3  False\n\n>>> tb == 2\n       col-1  col-2  col-3\n    0  False  False  False\n    1   True  False  False\n    2  False  False  False\n    3  False  False  False\n\n")),Object(r.b)("h3",{id:"not-equal"},"Not Equal"),Object(r.b)("p",null,"Not equal operator for Table\nArgs:\nother: can be a numeric scalar or Table"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{}),"    Returns: PyCylon Table\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),">>> tb\n       col-1  col-2  col-3\n    0      1      5      9\n    1      2      6     10\n    2      3      7     11\n    3      4      8     12\n\n>>> tb3 = tb['col-1'] != 2\n       col-1\n    0   True\n    1  False\n    2   True\n    3   True\n\n>>> tb4 = tb != 2\n       col-1  col-2  col-3\n    0   True   True   True\n    1  False   True   True\n    2   True   True   True\n    3   True   True   True\n")),Object(r.b)("h3",{id:"lesser-than"},"Lesser Than"),Object(r.b)("p",null,"Lesser than operator for Table\nArgs:\nother: can be a numeric scalar or Table"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{}),"    Returns: PyCylon Table\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),">>> tb\n       col-1  col-2  col-3\n    0      1      5      9\n    1      2      6     10\n    2      3      7     11\n    3      4      8     12\n\n>>> tb3 = tb['col-1'] < 2\n       col-1\n    0   True\n    1  False\n    2  False\n    3  False\n\n>>> tb4 = tb < 2\n       col-1  col-2  col-3\n    0   True  False  False\n    1  False  False  False\n    2  False  False  False\n    3  False  False  False\n")),Object(r.b)("h3",{id:"greater-than"},"Greater Than"),Object(r.b)("p",null,"Greater than operator for Table\nArgs:\nother: can be a numeric scalar or Table"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{}),"    Returns: PyCylon Table\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),">>> tb\n       col-1  col-2  col-3\n    0      1      5      9\n    1      2      6     10\n    2      3      7     11\n    3      4      8     12\n\n>>> tb3 = tb['col-1'] > 2\n        col-1\n    0  False\n    1  False\n    2   True\n    3   True\n\n>>> tb4 = tb > 2\n       col-1  col-2  col-3\n    0  False   True   True\n    1  False   True   True\n    2   True   True   True\n    3   True   True   True\n")),Object(r.b)("h3",{id:"lesser-than-equal"},"Lesser Than Equal"),Object(r.b)("p",null,"Lesser than or equal operator for Table\nArgs:\nother: can be a numeric scalar or Table"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{}),"    Returns: PyCylon Table\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),">>> tb\n       col-1  col-2  col-3\n    0      1      5      9\n    1      2      6     10\n    2      3      7     11\n    3      4      8     12\n\n>>> tb3 = tb['col-1'] <= 2\n        col-1\n    0   True\n    1   True\n    2  False\n    3  False\n\n>>> tb4 = tb <= 2\n       col-1  col-2  col-3\n    0   True  False  False\n    1   True  False  False\n    2  False  False  False\n    3  False  False  False\n")),Object(r.b)("h3",{id:"greater-than-equal"},"Greater Than Equal"),Object(r.b)("p",null,"Greater than or equal operator for Table\nArgs:\nother: can be a numeric scalar or Table"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{}),"    Returns: PyCylon Table\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),">>> tb\n       col-1  col-2  col-3\n    0      1      5      9\n    1      2      6     10\n    2      3      7     11\n    3      4      8     12\n\n\n>>> tb3 = tb['col-1'] >= 2\n       col-1\n    0  False\n    1   True\n    2   True\n    3   True\n\n>>> tb4 = tb >= 2\n       col-1  col-2  col-3\n    0  False   True   True\n    1   True   True   True\n    2   True   True   True\n    3   True   True   True\n")),Object(r.b)("h2",{id:"logical-operators"},"Logical Operators"),Object(r.b)("h3",{id:"or"},"Or"),Object(r.b)("p",null,"Or operator for Table\nArgs:\nother: PyCylon Table"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{}),"    Returns: PyCylon Table\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),">>> tb1\n       col-1  col-2\n    0  False   True\n    1   True   True\n    2  False  False\n    3   True  False\n\n>>> tb2\n        col-1  col-2\n    0   True  False\n    1   True   True\n    2  False  False\n    3  False   True\n\n>>> tb_or = tb1 | tb2\n       col-1  col-2\n    0   True   True\n    1   True   True\n    2  False  False\n    3   True   True\n")),Object(r.b)("h3",{id:"and"},"And"),Object(r.b)("p",null,"And operator for Table\nArgs:\nother: PyCylon Table"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{}),"    Returns: PyCylon Table\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),">>> tb1\n       col-1  col-2\n    0  False   True\n    1   True   True\n    2  False  False\n    3   True  False\n\n>>> tb2\n        col-1  col-2\n    0   True  False\n    1   True   True\n    2  False  False\n    3  False   True\n\n>>> tb_or = tb1 & tb2\n       col-1  col-2\n    0  False  False\n    1   True   True\n    2  False  False\n    3  False  False\n")),Object(r.b)("h3",{id:"invert"},"Invert"),Object(r.b)("p",null,"Only support bool valued Tables"),Object(r.b)("p",null,"Invert operator for Table"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{}),"     Returns: PyCylon Table\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"})," >>> tb\n        col-1  col-2\n    0  False   True\n    1   True   True\n    2  False  False\n    3   True  False\n\n>>> ~tb\n       col-1  col-2\n    0   True  False\n    1  False  False\n    2   True   True\n    3  False   True\n")),Object(r.b)("h2",{id:"math-operators"},"Math Operators"),Object(r.b)("p",null,"Currently support negation, add, subtract, multiply and division on scalar numeric values."),Object(r.b)("h3",{id:"negation"},"Negation"),Object(r.b)("p",null,"Negation operator for Table"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{}),"     Returns: PyCylon Table\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),">>> tb\n        col-1  col-2  col-3\n    0      1      5      9\n    1      2      6     10\n    2      3      7     11\n    3      4      8     12\n\n>>> -tb\n       col-1  col-2  col-3\n    0     -1     -5     -9\n    1     -2     -6    -10\n    2     -3     -7    -11\n    3     -4     -8    -12\n")),Object(r.b)("h3",{id:"add"},"Add"),Object(r.b)("p",null,"Add operator for Table\nArgs:\nother: scalar numeric"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{}),"     Returns: PyCylon Table\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),">>> tb\n        col-1  col-2  col-3\n    0      1      5      9\n    1      2      6     10\n    2      3      7     11\n    3      4      8     12\n\n>>> tb + 2\n       col-1  col-2  col-3\n    0      3      7     11\n    1      4      8     12\n    2      5      9     13\n    3      6     10     14\n")),Object(r.b)("h3",{id:"subtract"},"Subtract"),Object(r.b)("p",null,"Subtract operator for Table\nArgs:\nother: scalar numeric"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{}),"     Returns: PyCylon Table\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),">>> tb\n        col-1  col-2  col-3\n    0      1      5      9\n    1      2      6     10\n    2      3      7     11\n    3      4      8     12\n\n>>> tb - 2\n       col-1  col-2  col-3\n    0     -1      3      7\n    1      0      4      8\n    2      1      5      9\n    3      2      6     10\n")),Object(r.b)("h3",{id:"multiply"},"Multiply"),Object(r.b)("p",null,"Multiply operator for Table\nArgs:\nother: scalar numeric"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{}),"     Returns: PyCylon Table\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),">>> tb\n        col-1  col-2  col-3\n    0      1      5      9\n    1      2      6     10\n    2      3      7     11\n    3      4      8     12\n\n>>> tb * 2\n       col-1  col-2  col-3\n    0      2     10     18\n    1      4     12     20\n    2      6     14     22\n    3      8     16     24\n")),Object(r.b)("h3",{id:"division"},"Division"),Object(r.b)("p",null,"Element-wise division operator for Table\nArgs:\nother: scalar numeric"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{}),"     Returns: PyCylon Table\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),">>> tb\n        col-1  col-2  col-3\n    0      1      5      9\n    1      2      6     10\n    2      3      7     11\n    3      4      8     12\n\n>>> tb / 2\n       col-1  col-2  col-3\n    0    0.5    2.5    4.5\n    1    1.0    3.0    5.0\n    2    1.5    3.5    5.5\n    3    2.0    4.0    6.0\n")),Object(r.b)("h2",{id:"drop"},"Drop"),Object(r.b)("p",null,"drop a column or list of columns from a Table\nArgs:\ncolumn_names: List","[str]"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{}),"    Returns: PyCylon Table\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),">>> tb\n        col-1  col-2  col-3\n    0      1      5      9\n    1      2      6     10\n    2      3      7     11\n    3      4      8     12\n\n>>> tb.drop(['col-1'])\n       col-2  col-3\n    0      5      9\n    1      6     10\n    2      7     11\n    3      8     12\n")),Object(r.b)("h2",{id:"fillna"},"Fillna"),Object(r.b)("p",null,"Fill not applicable values with a given value\nArgs:\nfill_value: scalar"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{}),"    Returns: PyCylon Table\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),">>> tb\n       col-1  col-2  col-3\n    0    1.0    5.0    9.0\n    1    NaN    6.0   10.0\n    2    3.0    NaN   11.0\n    3    4.0    8.0    NaN\n\n>>> tb.fillna(0)\n       col-1  col-2  col-3\n    0      1      5      9\n    1      0      6     10\n    2      3      0     11\n    3      4      8      0\n")),Object(r.b)("h2",{id:"where"},"Where"),Object(r.b)("p",null,"Experimental version of Where operation.\nReplace values where condition is False\nArgs:\ncondition: bool Table\nother: Scalar"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{}),"    Returns: PyCylon Table\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),">>> tb\n       col-1  col-2  col-3\n    0      1      5      9\n    1      2      6     10\n    2      3      7     11\n    3      4      8     12\n\n>>> tb.where(tb > 2)\n        col-1  col-2  col-3\n    0    NaN      5      9\n    1    NaN      6     10\n    2    3.0      7     11\n    3    4.0      8     12\n\n>>> tb.where(tb > 2, 10)\n       col-1  col-2  col-3\n    0     10      5      9\n    1     10      6     10\n    2      3      7     11\n    3      4      8     12\n")),Object(r.b)("h2",{id:"isnull"},"IsNull"),Object(r.b)("p",null,"Checks for null elements and returns a bool Table\nReturns: PyCylon Table"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),">>> tb\n       col-1  col-2  col-3\n    0    1.0    5.0    9.0\n    1    NaN    6.0   10.0\n    2    3.0    NaN   11.0\n    3    4.0    8.0    NaN\n\n>>> tb.isnull()\n        col-1  col-2  col-3\n    0  False  False  False\n    1   True  False  False\n    2  False   True  False\n    3  False  False   True\n")),Object(r.b)("h2",{id:"isna"},"IsNA"),Object(r.b)("p",null,"Check for not applicable values and returns a bool Table\nReturns: PyCylon Table"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),">>> tb\n       col-1  col-2  col-3\n    0    1.0    5.0    9.0\n    1    NaN    6.0   10.0\n    2    3.0    NaN   11.0\n    3    4.0    8.0    NaN\n\n>>> tb.isna()\n        col-1  col-2  col-3\n    0  False  False  False\n    1   True  False  False\n    2  False   True  False\n    3  False  False   True\n")),Object(r.b)("h2",{id:"not-null"},"Not Null"),Object(r.b)("p",null,"Check the not null values and returns a bool Table\nReturns: PyCylon Table"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),">>> tb\n       col-1  col-2  col-3\n    0    1.0    5.0    9.0\n    1    NaN    6.0   10.0\n    2    3.0    NaN   11.0\n    3    4.0    8.0    NaN\n\n>>> tb.notnull()\n       col-1  col-2  col-3\n    0   True   True   True\n    1  False   True   True\n    2   True  False   True\n    3   True   True  False\n")),Object(r.b)("h2",{id:"not-na"},"Not NA"),Object(r.b)("p",null,"Checks for not NA values and returns a bool Table\nReturns: PyCylon Table"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),">>> tb\n        col-1  col-2  col-3\n    0    1.0    5.0    9.0\n    1    NaN    6.0   10.0\n    2    3.0    NaN   11.0\n    3    4.0    8.0    NaN\n\n>>> tb.notna()\n       col-1  col-2  col-3\n    0   True   True   True\n    1  False   True   True\n    2   True  False   True\n    3   True   True  False\n")),Object(r.b)("h2",{id:"rename"},"Rename"),Object(r.b)("p",null,"Rename a Table with a column name or column names\nArgs:\ncolumn_names: dictionary or full list of new column names"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{}),"    Returns: PyCylon Table\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),">>> tb\n        col-1  col-2  col-3\n    0      1      5      9\n    1      2      6     10\n    2      3      7     11\n    3      4      8     12\n\n>>> tb.rename({'col-1': 'col_1'})\n       col_1  col-2  col-3\n    0      1      5      9\n    1      2      6     10\n    2      3      7     11\n    3      4      8     12\n\n>>> tb.rename(['c1', 'c2', 'c3'])\n       c1  c2  c3\n    0   1   5   9\n    1   2   6  10\n    2   3   7  11\n    3   4   8  12\n")),Object(r.b)("h2",{id:"add-prefix"},"Add Prefix"),Object(r.b)("p",null,"Adding a prefix to column names\nArgs:\nprefix: str"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{}),"    Returns: PyCylon Table with prefix updated\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),">>> tb\n        col-1  col-2  col-3\n    0      1      5      9\n    1      2      6     10\n    2      3      7     11\n    3      4      8     12\n\n>>> tb.add_prefix('old_')\n       old_c1  old_c2  old_c3\n    0       1       5       9\n    1       2       6      10\n    2       3       7      11\n    3       4       8      12\n")),Object(r.b)("h2",{id:"add-suffix"},"Add Suffix"),Object(r.b)("p",null,"Adding a prefix to column names\nArgs:\nprefix: str"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{}),"    Returns: PyCylon Table with prefix updated\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),">>> tb\n        col-1  col-2  col-3\n    0      1      5      9\n    1      2      6     10\n    2      3      7     11\n    3      4      8     12\n\n>>> tb.add_suffix('_old')\n       c1_old  c2_old  c3_old\n    0       1       5       9\n    1       2       6      10\n    2       3       7      11\n    3       4       8      12\n")),Object(r.b)("h2",{id:"index"},"Index"),Object(r.b)("p",null,"Retrieve index if exists or provide a range index as default\nReturns: Index object"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),">>> tb.index\n     <pycylon.index.RangeIndex object at 0x7f58bde8e040>\n")),Object(r.b)("h2",{id:"set-index"},"Set Index"),Object(r.b)("p",null,"Set Index\nArgs:\nkey: pycylon.Index Object or an object extended from pycylon.Index"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{}),"    Returns: None\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),">>> tb\n       col-1  col-2  col-3\n    0      1      5      9\n    1      2      6     10\n    2      3      7     11\n    3      4      8     12\n\n>>> tb.set_index(['a', 'b', 'c', 'd'])\n\n>>> tb.index\n    <pycylon.index.CategoricalIndex object at 0x7fa72c2b6ca0>\n\n>>> tb.index.index_values\n    ['a', 'b', 'c', 'd']\n")),Object(r.b)("h2",{id:"dropna"},"DropNa"),Object(r.b)("p",null,"Drop not applicable values from a Table\nArgs:\naxis: 0 for column and 1 for row and only do dropping on the specified axis\nhow: any or all, any refers to drop if any value is NA and drop only if all values\nare NA in the considered axis\ninplace: do the operation on the existing Table itself when set to True, the default\nis False and it produces a new Table with the drop update"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{}),"    Returns: PyCylon Table\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),">>> tb\n       col-1  col-2  col-3\n    0    1.0      5    9.0\n    1    NaN      6   10.0\n    2    3.0      7   11.0\n    3    4.0      8    NaN\n\n>>> tb_na.dropna(how='any')\n       col-2\n    0      5\n    1      6\n    2      7\n    3      8\n\n>>> tb_na.dropna(how='all')\n       col-1  col-2  col-3\n    0    1.0      5    9.0\n    1    NaN      6   10.0\n    2    3.0      7   11.0\n    3    4.0      8    NaN\n\n>>> tb_na.dropna(axis=1, how='any')\n       col-1  col-2  col-3\n    0      1      5      9\n    1      3      7     11\n\n>>> tb_na.dropna(axis=1, how='all')\n       col-1  col-2  col-3\n    0    1.0      5    9.0\n    1    NaN      6   10.0\n    2    3.0      7   11.0\n    3    4.0      8    NaN\n\n>>> tb_na\n       col-1  col-2  col-3\n    0    1.0      5    9.0\n    1    NaN      6   10.0\n    2    3.0      7   11.0\n    3    4.0      8    NaN\n\n>>> tb_na.dropna(axis=1, how='any', inplace=True)\n       col-1  col-2  col-3\n    0      1      5      9\n    1      3      7     11\n\n>>> tb_na\n       col-1  col-2  col-3\n    0      1      5      9\n    1      3      7     11\n")))}p.isMDXComponent=!0},91:function(e,n,a){"use strict";a.d(n,"a",(function(){return s})),a.d(n,"b",(function(){return O}));var t=a(0),l=a.n(t);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function o(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function c(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?o(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function b(e,n){if(null==e)return{};var a,t,l=function(e,n){if(null==e)return{};var a,t,l={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(l[a]=e[a]);return l}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var i=l.a.createContext({}),p=function(e){var n=l.a.useContext(i),a=n;return e&&(a="function"==typeof e?e(n):c(c({},n),e)),a},s=function(e){var n=p(e.components);return l.a.createElement(i.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return l.a.createElement(l.a.Fragment,{},n)}},d=l.a.forwardRef((function(e,n){var a=e.components,t=e.mdxType,r=e.originalType,o=e.parentName,i=b(e,["components","mdxType","originalType","parentName"]),s=p(a),d=t,O=s["".concat(o,".").concat(d)]||s[d]||u[d]||r;return a?l.a.createElement(O,c(c({ref:n},i),{},{components:a})):l.a.createElement(O,c({ref:n},i))}));function O(e,n){var a=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var r=a.length,o=new Array(r);o[0]=d;var c={};for(var b in n)hasOwnProperty.call(n,b)&&(c[b]=n[b]);c.originalType=e,c.mdxType="string"==typeof e?e:t,o[1]=c;for(var i=2;i<r;i++)o[i]=a[i];return l.a.createElement.apply(null,o)}return l.a.createElement.apply(null,a)}d.displayName="MDXCreateElement"}}]);